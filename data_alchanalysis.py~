from alchemyapi import AlchemyAPI
import json
from pprint import pprint
import calendar
from datetime import datetime
import unicodedata

class TweetInfo:
 	def __init__(self, datetime, id, text):
 		self.datetime = datetime
 		self.id = id
 		self.text = text
 		self.responseEntities = None
 		self.responseKeywords = None

def getTPM(arrOfObj):
	start = arrOfObj[0].datetime
	intervals = (arrOfObj[len(arrOfObj)-1].datetime-start)/300+1
	tweetPerMin = [0]*intervals
	for x in range(0, len(tweetPerMin)):
		tweetPerMin[x] = 0
	for x in arrOfObj:
		secs = x.datetime - start
		tweetPerMin[int(secs/300)] += 1
	return tweetPerMin

def getAlcData(arrOfObj):
	
	alchemyapi = AlchemyAPI()	

	
	#for x in range(0,len(arrOfObj)):
	for x in range(0, 10):
		asc = unicodedata.normalize('NFKD', arrOfObj[x].text).encode('ascii','ignore')
		print x		
		print asc 
		arrOfObj[x].responseEntities = alchemyapi.entities('text',asc, { 'sentiment':1 })
		arrOfObj[x].responseKeywords = alchemyapi.keywords('text',asc, { 'sentiment':1 })	

def getEntities(tweet):
	if tweet.responseEntities['status'] == 'OK':
		for entity in tweet.responseEntities['entities']:
			print 'text: ' + entity['text']
			print 'type: ' + entity['type']
			print 'relevance: ' + entity['relevance']
			print 'sentiment: ' + entity['sentiment']['type']
			if 'score' in entity['sentiment']:
 				print 'score: ' + entity['sentiment']['score']
			print "\n"
	else:
		print('Error in entity extraction call: ', tweet.responseEntities['statusInfo'])

def getKeywords(tweet):
	if tweet.responseKeywords['status'] == 'OK':
		for keyword in tweet.responseKeywords['keywords']:
			print 'text: ' + keyword['text']
			print 'relevance: ' + keyword['relevance']
			print 'sentiment: ' + keyword['sentiment']['type']
			if 'score' in keyword['sentiment']:
 				print 'score: ' + keyword['sentiment']['score']
			print "\n"
	else:
		print('Error in keyword extaction call: ', tweet.responseKeywords['statusInfo'])

def getDatafromRaw(rawdata):
	with open(rawdata) as f:
		data = json.loads(f.read())
    	datArr = []
    

    	for item in data:		
			s = item["created_at"]
			t = calendar.timegm(datetime.strptime(s, "%a %b %d %H:%M:%S +0000 %Y").timetuple())
			
			id = item["id"]
			text = item["text"]
				
			tInf = TweetInfo(t, id, text)
			datArr.append(tInf)
		
	return datArr

def toJSFM(convert):
	converted = "["
	for i in range(0, len(convert)): 					#Parses through the string you want to convert
		converted += "[" + str(i*5) + ", " + str(convert[i]) + "]"	#Formats it
		if(i < len(convert)-1):
			converted += ", "					#Checks for last entry to determine if it should
		else:								#end with ", " or "]"
			converted += "]"

	#print converted
	return converted
	

def getprocessedTPM(data):

	tweetarray = getDatafromRaw(data)
	tpm = getTPM(tweetarray)

	return toJSFM(tpm)

def main():
	
	print "tae-min's part"
	data = 'test_data'
	tweetarray = getDatafromRaw(data)
	tpm = getTPM(tweetarray)
	
	print "-----------------------------\n"
	
	print "felix's part"
	formatted_data = toJSFM(tpm)
	#print formatted_data

	
	#print tweetarray[40].text
	#string1 = u"tweetarray[40].text"
	#string2 = unicodedata.normalize('NFKD', tweetarray[40].text).encode('ascii','ignore')	
	
	getAlcData(tweetarray)	
	getEntities(tweetarray[5])
	getKeywords(tweetarray[5])

	#try:
	#	getAlcData(string2)

	#except KeyError: 
	#	print "fuck the japs"
	#	pass

	
if __name__ == '__main__':
	main() # test client
